// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/urandom/kd/k8s (interfaces: ClientSet)

// Package k8s_test is a generated GoMock package.
package k8s_test

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	v10 "k8s.io/client-go/kubernetes/typed/batch/v1"
	v1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"
	v11 "k8s.io/client-go/kubernetes/typed/core/v1"
	v1beta10 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	reflect "reflect"
)

// MockClientSet is a mock of ClientSet interface
type MockClientSet struct {
	ctrl     *gomock.Controller
	recorder *MockClientSetMockRecorder
}

// MockClientSetMockRecorder is the mock recorder for MockClientSet
type MockClientSetMockRecorder struct {
	mock *MockClientSet
}

// NewMockClientSet creates a new mock instance
func NewMockClientSet(ctrl *gomock.Controller) *MockClientSet {
	mock := &MockClientSet{ctrl: ctrl}
	mock.recorder = &MockClientSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientSet) EXPECT() *MockClientSetMockRecorder {
	return m.recorder
}

// AppsV1 mocks base method
func (m *MockClientSet) AppsV1() v1.AppsV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppsV1")
	ret0, _ := ret[0].(v1.AppsV1Interface)
	return ret0
}

// AppsV1 indicates an expected call of AppsV1
func (mr *MockClientSetMockRecorder) AppsV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppsV1", reflect.TypeOf((*MockClientSet)(nil).AppsV1))
}

// BatchV1 mocks base method
func (m *MockClientSet) BatchV1() v10.BatchV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchV1")
	ret0, _ := ret[0].(v10.BatchV1Interface)
	return ret0
}

// BatchV1 indicates an expected call of BatchV1
func (mr *MockClientSetMockRecorder) BatchV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchV1", reflect.TypeOf((*MockClientSet)(nil).BatchV1))
}

// BatchV1beta1 mocks base method
func (m *MockClientSet) BatchV1beta1() v1beta1.BatchV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchV1beta1")
	ret0, _ := ret[0].(v1beta1.BatchV1beta1Interface)
	return ret0
}

// BatchV1beta1 indicates an expected call of BatchV1beta1
func (mr *MockClientSetMockRecorder) BatchV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchV1beta1", reflect.TypeOf((*MockClientSet)(nil).BatchV1beta1))
}

// CoreV1 mocks base method
func (m *MockClientSet) CoreV1() v11.CoreV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoreV1")
	ret0, _ := ret[0].(v11.CoreV1Interface)
	return ret0
}

// CoreV1 indicates an expected call of CoreV1
func (mr *MockClientSetMockRecorder) CoreV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoreV1", reflect.TypeOf((*MockClientSet)(nil).CoreV1))
}

// ExtensionsV1beta1 mocks base method
func (m *MockClientSet) ExtensionsV1beta1() v1beta10.ExtensionsV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionsV1beta1")
	ret0, _ := ret[0].(v1beta10.ExtensionsV1beta1Interface)
	return ret0
}

// ExtensionsV1beta1 indicates an expected call of ExtensionsV1beta1
func (mr *MockClientSetMockRecorder) ExtensionsV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionsV1beta1", reflect.TypeOf((*MockClientSet)(nil).ExtensionsV1beta1))
}
