// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/apimachinery/pkg/fields (interfaces: Selector)

// Package k8s_test is a generated GoMock package.
package k8s_test

import (
	gomock "github.com/golang/mock/gomock"
	fields "k8s.io/apimachinery/pkg/fields"
	reflect "reflect"
)

// MockSelector is a mock of Selector interface
type MockSelector struct {
	ctrl     *gomock.Controller
	recorder *MockSelectorMockRecorder
}

// MockSelectorMockRecorder is the mock recorder for MockSelector
type MockSelectorMockRecorder struct {
	mock *MockSelector
}

// NewMockSelector creates a new mock instance
func NewMockSelector(ctrl *gomock.Controller) *MockSelector {
	mock := &MockSelector{ctrl: ctrl}
	mock.recorder = &MockSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSelector) EXPECT() *MockSelectorMockRecorder {
	return m.recorder
}

// DeepCopySelector mocks base method
func (m *MockSelector) DeepCopySelector() fields.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeepCopySelector")
	ret0, _ := ret[0].(fields.Selector)
	return ret0
}

// DeepCopySelector indicates an expected call of DeepCopySelector
func (mr *MockSelectorMockRecorder) DeepCopySelector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeepCopySelector", reflect.TypeOf((*MockSelector)(nil).DeepCopySelector))
}

// Empty mocks base method
func (m *MockSelector) Empty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockSelectorMockRecorder) Empty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockSelector)(nil).Empty))
}

// Matches mocks base method
func (m *MockSelector) Matches(arg0 fields.Fields) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Matches indicates an expected call of Matches
func (mr *MockSelectorMockRecorder) Matches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockSelector)(nil).Matches), arg0)
}

// Requirements mocks base method
func (m *MockSelector) Requirements() fields.Requirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requirements")
	ret0, _ := ret[0].(fields.Requirements)
	return ret0
}

// Requirements indicates an expected call of Requirements
func (mr *MockSelectorMockRecorder) Requirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requirements", reflect.TypeOf((*MockSelector)(nil).Requirements))
}

// RequiresExactMatch mocks base method
func (m *MockSelector) RequiresExactMatch(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiresExactMatch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RequiresExactMatch indicates an expected call of RequiresExactMatch
func (mr *MockSelectorMockRecorder) RequiresExactMatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiresExactMatch", reflect.TypeOf((*MockSelector)(nil).RequiresExactMatch), arg0)
}

// String mocks base method
func (m *MockSelector) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockSelectorMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSelector)(nil).String))
}

// Transform mocks base method
func (m *MockSelector) Transform(arg0 fields.TransformFunc) (fields.Selector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", arg0)
	ret0, _ := ret[0].(fields.Selector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform
func (mr *MockSelectorMockRecorder) Transform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockSelector)(nil).Transform), arg0)
}
